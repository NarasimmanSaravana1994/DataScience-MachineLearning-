from unittest import TestCase
from NaiveBayesModel import NaiveBayes
import unittest
class TestConnector(TestCase):

   # MsSql Connection Passed
    def test_ConnectorMsSQl(self):
        ServerName = "MsSql"
        ServerIP = "bellsqlnew"
        UserID = "qa"
        Password = "bellqa"
        Database = "NORTHWIND"
        Port = "1433"
        SId = None
        s = NaiveBayes()
        Output = s.Connector(ServerName,ServerIP,UserID,Password,Database,Port,SId)
        self.assertTrue(Output)
        return Output

    # Oracle Password expired
    # def test_ConnectorOracle(self):
    #     ServerName= "Oracle"
    #     ServerIP= "10.0.0.9/orcl.ducenitchn.com"
    #     UserID= "PRODUCT_TEST"
    #     Password= "tiger"
    #     Database = "PRODUCT_TEST"
    #     Port = "1521"
    #     SId = "orcl"
    #     s = NaiveBayes()
    #     Output = s.Connector(ServerName,ServerIP,UserID,Password,Database,Port,SId)
    #     self.assertTrue(Output)

    # MySql Connection Passed
    # def test_ConnectorMySql(self):
    #     ServerName = "MySql"
    #     ServerIP = "10.0.0.9"
    #     UserID = "root"
    #     Password = "root"
    #     Database = "northwind"
    #     Port = "3306"
    #     SId = None
    #     s = NaiveBayes()
    #     Output = s.Connector(ServerName, ServerIP, UserID, Password, Database, Port, SId)
    #     self.assertTrue(Output)

    # Postgre Connection Passed
    # def test_ConnectorPostgre(self):
    #     ServerName = "Postgre"
    #     ServerIP = "10.0.0.9"
    #     UserID = "postgres"
    #     Password = "Temp1234"
    #     Database = "SSPLSRV3"
    #     Port = "5432"
    #     SId = None
    #     s = NaiveBayes()
    #     Output = s.Connector(ServerName,ServerIP,UserID,Password,Database,Port,SId)
    #     self.assertTrue(Output)

class TestFetchInput(TestConnector):

    # MsSql fetching Input
    def test_FetchInput(self):
        obj=TestConnector()
        Connection=obj.test_ConnectorMsSQl()
        Query = "select Top 100 * from SampleComments"
        Data = s.FetchInputData(Connection,Query)
        #self.assertIsNotNone(Data)
        return Data;


class TestDataProcessing(TestFetchInput):

    def test_TestDataProcessing(self):

        obj=TestFetchInput()
        Data=obj.test_FetchInput()
        Data_Comment=Data["Comments"]
        Data_Category=Data["Category"]
        NaiveObject=NaiveBayes()
        result=NaiveObject.DataProcessing(Data_Comment)
        #self.assertIsNotNone(result)
        return result,Data_Category;

class NaiveBayesMetrics(TestDataProcessing):

    def test_NaiveBayesMetrics(self):
        obj=TestDataProcessing()
        ProcessedData, Data_Category=obj.test_TestDataProcessing()
        NaiveObject=NaiveBayes()
        result=NaiveObject.NaiveBayes(ProcessedData,Data_Category)
        #self.assertEqual(result,True)

class TestNaiveBayesModel(TestCase):

    def test_NaiveBayesModel(self):
        ServerName = "MsSql"
        ServerIP = "bellsqlnew"
        UserID = "qa"
        Password = "bellqa"
        Database = "NORTHWIND"
        Port = "1433"
        SId = None
        NaiveObject=NaiveBayes()
        result=NaiveObject.NaiveBayesTextModel(ServerName,ServerIP,UserID,Password,Database,Port,SId,Query,"Comments","Category","pos")
        #self.assertEqual(result,True)



if __name__ == '__main__':
    unittest.main()
