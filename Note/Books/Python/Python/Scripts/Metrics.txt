import pyodbc
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer
from sklearn.cross_validation import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score,confusion_matrix,recall_score,precision_score,roc_curve,roc_auc_score
import matplotlib.pyplot as mp
from sklearn.preprocessing import binarize
import sqlite3
import numpy as np
from scipy import stats
from pandas_ml import ConfusionMatrix

connlite = sqlite3.connect("output.db")
curlite = connlite.cursor()


#ms sql connection
conn = pyodbc.connect("DRIVER={SQL Server Native Client 11.0};SERVER=bellsqlnew;UID=qa;PWD=bellqa;DATABASE=NORTHWIND")
cur = conn.cursor()

df = pd.read_sql("select * from SampleComments", conn)

# df.loc[df["Category"] == 'neg',"Category"]=0
# df.loc[df["Category"] == 'pos',"Category"]=1

df_Comment = df["Comments"]
df_Categ = df["Category"]

cv = TfidfVectorizer(min_df=1,stop_words='english')

x_train, x_test, y_train, y_test = train_test_split(df_Comment, df_Categ, test_size=0.3, random_state=1)
mnb= MultinomialNB()

Comment_tr = cv.fit_transform(x_train)

y_train = y_train.astype('int')
mnb.fit(Comment_tr,y_train)

Comment_tst = cv.transform(x_test)
y_test = y_test.astype('int')
y_pred_class = mnb.predict(Comment_tst)


curlite.execute("DROP TABLE IF EXISTS ConfusionTable")
curlite.execute('''CREATE TABLE ConfusionTable (Thresholds float,TrueNegative int, FalsePositive int,FalseNegative int,TruePositive int,Sensitivity float,
Specificity float,FalsePositiveRate float,Accuracy float,Mis_Clas_Error float,F1Score float,Precision float)''')


for thresholds in np.arange(0.0125, 1.0125, 0.0125):
    new_pred = binarize(mnb.predict_proba(Comment_tst)[:,1],thresholds)[0]
    confusion = confusion_matrix(y_test,new_pred)
    TP = confusion[1, 1]
    FN = confusion[1, 0]
    FP = confusion[0, 1]
    TN = confusion[0, 0]
    Sensitivity = TP/float(TP+FN)
    Specificity = TN/float(TN+FP)
    False_Positive_rate = FP/float(TN+FP)
    Accuracy = (TP+TN)/float(TN+TP+FN+FP)
    MisClassificationError = (FP+FN)/float(TP+TN+FP+FN)
    Precision = TP/float(TP+FP)
    F1Score = 2 * (Sensitivity * Precision) / (Sensitivity + Precision)
    curlite.execute("INSERT INTO ConfusionTable VALUES (?,?,?,?,?,?,?,?,?,?,?,?)",(str(round(thresholds,4)),int(TN),int(FP),int(FN),int(TP),Sensitivity,Specificity,False_Positive_rate,Accuracy,MisClassificationError,F1Score,Precision))

connlite.commit()


conn.close()
